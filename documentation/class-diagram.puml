@startuml
'https://plantuml.com/class-diagram

interface Entity<T> {
    + {static} persist(newEntity: T): T
    + {static} findById(entityId: number): T
    + {static} update(entityToUpdate: T): T
    + {static} delete(entityToDelete: T)
}

abstract class AbstractEntity<T> implements Entity

enum RawEventStatusEnum {
    + TO_BE_CONSUMED
    + CONSUMED
}

class RawEvent extends AbstractEntity {
    + id: number
    + rawContent: string
    + status: RawEventStatusEnum
    + {field} receivedAt: datetime = Now()
    + processedAt: datetime

    + extractAccountingEvent(): AccountingEvent

    + {static} findById(id: number): RawEvent
    + {static} findByStatus(status: RawEventStatusEnum): List<RawEvent>
}

interface AccountingEvent {
    + {static} constructFromRawContent(rawContent: string): AccountingEvent
    + {static} doesRawContentMatchThisEventType(rawContent: String): Boolean
}

interface IncomeEvent extends AccountingEvent

interface ExpenseEvent extends AccountingEvent

class SalaryIncomeEvent implements IncomeEvent {
    + {static} constructFromRawContent(rawContent: string): AccountingEvent
    + {static} doesRawContentMatchThisEventType(rawContent: String): Boolean
}

note left of AccountingEvent
    All concrete Event implementations must implement
    method <i>doesRawContentMatchThisEventType</i>
    as a way to unmistakably determine if raw content event
    represents it.
    In the same way, each Event implementation must implement
    method <i></i>
end note

class AccountingEventFactory {
    - {static} supportedEventsList: List<AccountingEvent>

    + buildAccountingEventFromRawContent(rawContent: string): AccountingEvent
}

RawEvent --> RawEventStatusEnum

AccountingEventFactory -- AccountingEvent : constructs >
AccountingEventFactory -- RawEvent : consumes >

@enduml
